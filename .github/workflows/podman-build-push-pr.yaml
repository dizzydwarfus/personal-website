name: Build & Push to AWS ECR with Podman

on:
  pull_request:
  issue_comment:
    types:
      - created
  workflow_dispatch:
    inputs:
      app_name:
        description: "app name which corresponds to image name, also the repo name in ecr"
        default: "personal-website"
        required: true
        type: string
      aws_region:
        description: "aws region that ecr is in"
        default: "eu-north-1"
        required: true
        type: string
      aws_account_id:
        description: "aws account id that ecr is in"
        default: "545009859307"
        required: true
        type: string
      s3_bucket_account_id:
        description: "Account ID where S3 bucket is created"
        default: "216989125379"
        required: true
        type: string
      s3_bucket:
        description: "S3 bucket containing public assets"
        default: "216989125379-personal-website-assets"
        required: true
        type: string
      s3_folder:
        description: "S3 folder path inside the bucket"
        default: "public/"
        required: true
jobs:
  build-and-push:
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'build pr')) ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_ID: ${{ inputs.aws_account_id || '545009859307' }}
      AWS_REGION: ${{ inputs.aws_region || 'eu-north-1' }}
      APP_NAME: ${{ inputs.app_name || 'personal-website' }}
      # PR_NUM: ${{ github.event.issue.number || github.event.pull_request.number || 'latest' }}
      PR_NUM: ${{ github.event.issue.number || 'latest' }}
      S3_BUCKET_ACCOUNT_ID: ${{ inputs.s3_bucket_account_id || '216989125379' }}
      S3_BUCKET: ${{ inputs.s3_bucket || '216989125379-personal-website-assets' }}
      S3_FOLDER: ${{ inputs.s3_folder || 'public/' }}
      MAIN_ROLE_ARN: "arn:aws:iam::${{ inputs.aws_account_id || '545009859307' }}:role/github-actions"
      PROD_ROLE_ARN: "arn:aws:iam::${{ inputs.s3_bucket_account_id || '216989125379' }}:role/github-s3-access"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Podman
        run: |
          sudo apt update
          sudo apt install -y podman
          podman --version
          aws --version

      - name: Assume Role in Main AWS Account
        id: assume-main
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.MAIN_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Assume Role in Prod AWS Account (S3 Access)
        id: assume-prod
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn ${{ env.PROD_ROLE_ARN }} \
            --role-session-name GitHubActionsProdRole \
            --query "Credentials" \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.SessionToken')" >> $GITHUB_ENV

      # bucket is in "prod" account while ecr in "main" - need to assume role in prod with role in main > source=main; target=prod; principal=main<role-arn>
      - name: Sync S3 Public Assets to `public/`
        run: |
          mkdir -p public
          aws s3 sync s3://${{ env.S3_BUCKET }}/${{ env.S3_FOLDER }}/ public/

      # - name: Login to Amazon ECR using Podman
      #   id: ecr_login
      #   run: |
      #     export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      #     export ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
      #     export ECR_LOGIN_CMD=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
      #     echo $ECR_LOGIN_CMD | podman login --username AWS --password-stdin $ECR_URI

      # - name: Build and Tag the Image with Podman
      #   run: |
      #     export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      #     export ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
      #     podman build -t ${{ env.APP_NAME }}:pr-${{ env.PR_NUM }} .
      #     podman tag ${{ env.APP_NAME }}:pr-${{ env.PR_NUM }} $ECR_URI/${{ env.APP_NAME }}:pr-${{ env.PR_NUM }}
      #     echo Successfully built $ECR_URI/${{ env.APP_NAME }}:pr-${{ env.PR_NUM }}!

      # - name: Push the Image to Amazon ECR
      #   run: |
      #     export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      #     export ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
      #     podman push $ECR_URI/${{ env.APP_NAME }}:pr-${{ env.PR_NUM }}
      #     echo Successfully pushed to $ECR_URI/${{ env.APP_NAME }}:pr-${{ env.PR_NUM }}
